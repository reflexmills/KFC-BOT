import os
import json
import asyncio
import requests
import asyncio
import logging
import uuid
from datetime import datetime
from decimal import Decimal, ROUND_DOWN
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
CRYPTO_BOT_TOKEN = os.getenv("CRYPTO_BOT_TOKEN")
CRYPTO_BOT_API_URL = "https://pay.crypt.bot/api"
USDT_RATE = Decimal('79')  # –ö—É—Ä—Å USDT –∫ —Ä—É–±–ª—é
YOOMONEY_WALLET = "-"  # –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞
SUPPORT_USERNAME = "@KFC_SERVIS"  # —é–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_FILE = 'database.json'
temp_orders = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
temp_deposits = {}  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è—Ö

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class OrderStates(StatesGroup):
    choosing_platform = State()
    choosing_service = State()
    entering_quantity = State()
    choosing_duration = State()
    choosing_date = State()
    choosing_time = State()
    entering_channel = State()
    confirmation = State()

class PaymentStates(StatesGroup):
    choosing_amount = State()
    confirmation = State()

class AdminStates(StatesGroup):
    managing_orders = State()
    adding_admin = State()
    removing_admin = State()
    changing_balance = State()

# –¶–µ–Ω—ã —É—Å–ª—É–≥ (—Ç–µ–ø–µ—Ä—å —Ü–µ–Ω–∞ –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É)
SERVICE_PRICES = {
    "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏": {"price": 1, "min": 10, "unit": "—à—Ç", "type": "quantity"},
    "–ñ–∏–≤–æ–π —á–∞—Ç RU": {"price": 319, "min": 1, "unit": "—á–∞—Å", "type": "duration"},
    "–ñ–∏–≤–æ–π —á–∞—Ç ENG": {"price": 419, "min": 1, "unit": "—á–∞—Å", "type": "duration"},
    "–ó—Ä–∏—Ç–µ–ª–∏": {"price": 1, "min": 10, "unit": "—à—Ç", "type": "quantity"}
}

# –°–ª–æ–≤–∞—Ä—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º
PLATFORM_IMAGES = {
    "YouTube": "https://radikal.cloud/i/photo-5350495139111499792-y.VJefY6",
    "Twitch": "https://radikal.cloud/i/photo-5350495139111499793-m.VJe8sx",
    "Kick": "https://radikal.cloud/i/photo-5350495139111499794-m.VJe9Qg"
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def load_db():
    try:
        with open(DB_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {'users': {}, 'orders': {}, 'admins': [6402443549], 'settings': {}}

def save_db(db):
    with open(DB_FILE, 'w') as f:
        json.dump(db, f, indent=4)

def get_main_kb(user_id):
    db = load_db()
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É"))
    kb.add(KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
    kb.add(KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    if user_id in db['admins']:
        kb.add(KeyboardButton(text="üëë –ê–¥–º–∏–Ω"))
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

def get_back_kb():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)

async def convert_rub_to_usdt(rub_amount):
    return (Decimal(rub_amount) / USDT_RATE).quantize(Decimal('0.00'), rounding=ROUND_DOWN)

# –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    db = load_db()
    user_id = message.from_user.id
    
    if str(user_id) not in db['users']:
        db['users'][str(user_id)] = {
            'balance': 0,
            'orders': [],
            'registration_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'username': message.from_user.username
        }
        save_db(db)
    
    await message.answer_photo(
        photo="https://imgfoto.host/i/cQwJbA",
        caption="üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–∏–º–æ–≤!</b>\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è\n"
                "‚Ä¢ üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        reply_markup=get_main_kb(user_id),
        parse_mode="HTML"
    )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def cmd_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_kb(message.from_user.id))

# –°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤
@dp.message(F.text == "üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É")
async def cmd_order(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üéÆ Kick"))
    kb.add(KeyboardButton(text="üì∫ YouTube"))
    kb.add(KeyboardButton(text="üü£ Twitch"))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer_photo(
        photo="https://imgfoto.host/i/cQEhtk",
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(OrderStates.choosing_platform)
    
@dp.message(OrderStates.choosing_platform, F.text.in_(["üéÆ Kick", "üì∫ YouTube", "üü£ Twitch"]))
async def process_platform(message: types.Message, state: FSMContext):
    platform_map = {
        "üéÆ Kick": "Kick",
        "üì∫ YouTube": "YouTube",
        "üü£ Twitch": "Twitch"
    }
    selected_platform = platform_map[message.text]
    await state.update_data(platform=selected_platform)
    
    platform_image = PLATFORM_IMAGES.get(selected_platform)
    
    kb = ReplyKeyboardBuilder()
    for service in SERVICE_PRICES:
        kb.add(KeyboardButton(text=service))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    if platform_image:
        await message.answer_photo(
            photo=platform_image,
            caption=f"<b>–í—ã–±—Ä–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {selected_platform}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=kb.as_markup(resize_keyboard=True),
            parse_mode="HTML"
        )
    await state.set_state(OrderStates.choosing_service)

@dp.message(OrderStates.choosing_service, F.text.in_(list(SERVICE_PRICES.keys())))
async def process_service(message: types.Message, state: FSMContext):
    service = message.text
    price_info = SERVICE_PRICES[service]
    await state.update_data(service=service, price_info=price_info)
    
    if price_info['type'] == "quantity":
        await message.answer(
            f"–£—Å–ª—É–≥–∞: {service}\n"
            f"–¶–µ–Ω–∞: {price_info['price']} —Ä—É–±/{price_info['unit']}\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: {price_info['min']} {price_info['unit']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
            reply_markup=get_back_kb()
        )
        await state.set_state(OrderStates.entering_quantity)
    elif price_info['type'] == "duration":
        kb = ReplyKeyboardBuilder()
        for hours in [1, 2, 3, 4, 5, 6]:
            kb.add(KeyboardButton(text=f"{hours} —á–∞—Å(–∞)"))
        kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
        kb.adjust(3)
        
        await message.answer(
            f"–£—Å–ª—É–≥–∞: {service}\n"
            f"–¶–µ–Ω–∞: {price_info['price']} —Ä—É–±/{price_info['unit']}\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: {price_info['min']} {price_info['unit']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∏–º–∞:",
            reply_markup=kb.as_markup(resize_keyboard=True)
        )
        await state.set_state(OrderStates.choosing_duration)

@dp.message(OrderStates.entering_quantity, F.text.regexp(r'^\d+$'))
async def process_quantity(message: types.Message, state: FSMContext):
    quantity = int(message.text)
    data = await state.get_data()
    price_info = data['price_info']
    
    if quantity < price_info['min']:
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {price_info['min']}. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
        return
    
    total_price = quantity * price_info['price']
    await state.update_data(quantity=quantity, total_price=total_price)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—Ç—Ä–∏–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.06):",
        reply_markup=get_back_kb()
    )
    await state.set_state(OrderStates.choosing_date)

@dp.message(OrderStates.choosing_duration, F.text.regexp(r'^\d+\s—á–∞—Å\(–∞\)$'))
async def process_duration(message: types.Message, state: FSMContext):
    duration = int(message.text.split()[0])
    data = await state.get_data()
    price_info = data['price_info']
    
    if duration < price_info['min']:
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {price_info['min']} —á–∞—Å. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
        return
    
    total_price = duration * price_info['price']
    await state.update_data(duration=duration, total_price=total_price)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—Ç—Ä–∏–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.06):",
        reply_markup=get_back_kb()
    )
    await state.set_state(OrderStates.choosing_date)

@dp.message(OrderStates.choosing_date, F.text.regexp(r'^\d{2}\.\d{2}$'))
async def process_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–∏–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00):",
        reply_markup=get_back_kb()
    )
    await state.set_state(OrderStates.choosing_time)

@dp.message(OrderStates.choosing_time, F.text.regexp(r'^\d{2}:\d{2}$'))
async def process_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'MyCoolChannel'):",
        reply_markup=get_back_kb()
    )
    await state.set_state(OrderStates.entering_channel)

@dp.message(OrderStates.entering_channel)
async def process_channel(message: types.Message, state: FSMContext):
    await state.update_data(channel=message.text)
    data = await state.get_data()
    price_info = data['price_info']
    
    if price_info['type'] == "quantity":
        details = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']} {price_info['unit']}"
    else:
        details = f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']} {price_info['unit']}"
    
    confirmation_msg = (
        "üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:</b>\n\n"
        f"1. –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {data['platform']}\n"
        f"2. –£—Å–ª—É–≥–∞: {data['service']}\n"
        f"3. {details}\n"
        f"4. –ö–∞–Ω–∞–ª: {data['channel']}\n"
        f"5. –î–∞—Ç–∞ —Å—Ç—Ä–∏–º–∞: {data['date']}\n"
        f"6. –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data['time']}\n\n"
        f"üí∞ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {data['total_price']} —Ä—É–±</b>"
    )
    
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"))
    kb.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer(confirmation_msg, reply_markup=kb.as_markup(resize_keyboard=True), parse_mode="HTML")
    await state.set_state(OrderStates.confirmation)

@dp.message(OrderStates.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    
    order_data = {
        'platform': data['platform'],
        'service': data['service'],
        'channel': data['channel'],
        'date': data['date'],
        'time': data['time'],
        'amount': data['total_price'],
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    if data['price_info']['type'] == "quantity":
        order_data['quantity'] = data['quantity']
    else:
        order_data['duration'] = data['duration']
    
    temp_orders[user_id] = order_data
    
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å CryptoBot"))
    kb.add(KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π"))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer(
        "üõí <b>–í–∞—à –∑–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</b>\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {data['total_price']} —Ä—É–±\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=kb.as_markup(resize_keyboard=True),
        parse_mode="HTML"
    )
    
    await state.clear()

# –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã
@dp.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π")
async def card_payment_handler(message: types.Message):
    payment_text = f"""
‚ú® <b>–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π</b> ‚ú®

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:

1. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: {SUPPORT_USERNAME}
2. –£–∫–∞–∂–∏—Ç–µ ID –≤–∞—â–µ–≥–æ Telegram
3. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç

–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º:
‚Ä¢ üí≥ Visa/Mastercard/–ú–ò–†
‚Ä¢ üè¶ –ü–µ—Ä–µ–≤–æ–¥ —Å –ª—é–±–æ–≥–æ –±–∞–Ω–∫–∞ –†–§
‚Ä¢ üì± –ÆMoney/–°–ë–ü

‚è≥ –û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç <b>5-15 –º–∏–Ω—É—Ç</b> (10:00-20:00 –ú–°–ö)
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=f"https://t.me/{SUPPORT_USERNAME[1:]}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="payment_back")]
    ])
    await message.answer(payment_text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data == "payment_back")
async def payment_back(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.answer()

@dp.message(F.text == "üí∞ –û–ø–ª–∞—Ç–∏—Ç—å CryptoBot")
async def cryptobot_payment_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id not in temp_orders:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã", reply_markup=get_back_kb())
        return

    order_data = temp_orders[user_id]
    rub_amount = Decimal(str(order_data['amount']))
    usdt_amount = await convert_rub_to_usdt(rub_amount)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
    if usdt_amount < Decimal('1.00'):
        await message.answer(
            f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 1 USDT (~{USDT_RATE} —Ä—É–±)\n"
            f"–í–∞—à–∞ —Å—É–º–º–∞: {usdt_amount} USDT",
            reply_markup=get_back_kb()
        )
        return

    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN,
        "Content-Type": "application/json"
    }
    payload = {
        "asset": "USDT",
        "amount": str(usdt_amount),
        "description": f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
        "payload": f"order_{user_id}",
        "allow_anonymous": False
    }

    try:
        response = requests.post(f"{CRYPTO_BOT_API_URL}/createInvoice", headers=headers, json=payload)
        response.raise_for_status()
        invoice = response.json()['result']
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", url=invoice['pay_url'])],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice['invoice_id']}")]
        ])
        
        await message.answer(
            f"üíé <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot</b>\n\n"
            f"‚ñ™ –°—É–º–º–∞: <b>{rub_amount} —Ä—É–±</b>\n"
            f"‚ñ™ –í USDT: <b>{usdt_amount}</b>\n"
            f"‚ñ™ –ö—É—Ä—Å: 1 USDT = {USDT_RATE} —Ä—É–±\n\n"
            "‚è≥ –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω <b>15 –º–∏–Ω—É—Ç</b>",
            reply_markup=kb,
            parse_mode="HTML"
        )
        
        asyncio.create_task(check_cryptobot_payment(invoice['invoice_id'], user_id, rub_amount, usdt_amount))
        
    except Exception as e:
        logger.error(f"CryptoBot error: {e}")
        await message.answer(
            "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_kb()
        )

async def check_cryptobot_payment(invoice_id, user_id, rub_amount, usdt_amount):
    headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
    
    for _ in range(30):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
        await asyncio.sleep(30)
        try:
            response = requests.get(f"{CRYPTO_BOT_API_URL}/getInvoices?invoice_ids={invoice_id}", headers=headers)
            response.raise_for_status()
            invoice = response.json()['result']['items'][0]
            
            if invoice['status'] == 'paid':
                db = load_db()
                user_id_str = str(user_id)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
                order_id = len(db['orders']) + 1
                db['orders'][str(order_id)] = {
                    'user_id': user_id,
                    **temp_orders[user_id],
                    'status': 'paid',
                    'paid_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'invoice_id': invoice_id
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id_str not in db['users']:
                    db['users'][user_id_str] = {
                        'balance': 0,
                        'orders': [],
                        'username': (await bot.get_chat(user_id)).username
                    }
                
                db['users'][user_id_str]['orders'].append(order_id)
                save_db(db)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                del temp_orders[user_id]
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.send_message(
                    user_id,
                    f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!</b>\n\n"
                    f"‚ñ´Ô∏è –°—É–º–º–∞: {rub_amount} —Ä—É–±\n"
                    f"‚ñ´Ô∏è –í USDT: {usdt_amount}\n"
                    f"‚ñ´Ô∏è –ö—É—Ä—Å: 1 USDT = {USDT_RATE} —Ä—É–±\n\n"
                    "üõ† –ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!",
                    reply_markup=get_main_kb(user_id),
                    parse_mode="HTML"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                for admin_id in db['admins']:
                    try:
                        await bot.send_message(
                            admin_id,
                            f"üÜï <b>–ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{db['users'][user_id_str].get('username', 'N/A')}\n"
                            f"üí∞ –°—É–º–º–∞: {rub_amount} —Ä—É–± (~{usdt_amount} USDT)\n"
                            f"üõí –£—Å–ª—É–≥–∞: {temp_orders[user_id]['service']}",
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.error(f"Admin notification error: {e}")
                
                return
                
        except Exception as e:
            logger.error(f"Payment check error: {e}")
    
    # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞
    if user_id in temp_orders:
        await bot.send_message(
            user_id,
            "‚åõ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–∫–∞–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_main_kb(user_id)
        )
        del temp_orders[user_id]

@dp.callback_query(F.data.startswith("check_"))
async def check_payment_handler(callback: types.CallbackQuery):
    invoice_id = callback.data.split("_")[1]
    headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
    
    try:
        response = requests.get(f"{CRYPTO_BOT_API_URL}/getInvoices?invoice_ids={invoice_id}", headers=headers)
        response.raise_for_status()
        invoice = response.json()['result']['items'][0]
        
        if invoice['status'] == 'paid':
            await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–∞!", show_alert=True)
        else:
            await callback.answer("‚ÑπÔ∏è –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Payment check error: {e}")
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

# –ü—Ä–æ—Ñ–∏–ª—å –∏ –±–∞–ª–∞–Ω—Å
@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    db = load_db()
    user_id = str(message.from_user.id)
    user_data = db['users'].get(user_id, {})
    
    if not user_data:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    orders_count = len(user_data.get('orders', []))
    paid_orders = sum(1 for oid in user_data.get('orders', []) 
                  if db['orders'].get(str(oid), {}).get('status') == 'paid')
    
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"‚ñ´Ô∏è ID: {user_id}\n"
        f"‚ñ´Ô∏è –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data.get('registration_date')}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data.get('balance', 0)} —Ä—É–±\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</b>\n"
        f"‚ñ´Ô∏è –í—Å–µ–≥–æ: {orders_count}\n"
        f"‚ñ´Ô∏è –û–ø–ª–∞—á–µ–Ω–æ: {paid_orders}"
    )
    
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üõçÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
    kb.add(KeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer(profile_text, reply_markup=kb.as_markup(resize_keyboard=True), parse_mode="HTML")

@dp.message(F.text == "üõçÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_user_orders(message: types.Message):
    db = load_db()
    user_id = str(message.from_user.id)
    user_data = db['users'].get(user_id, {})
    
    if not user_data or not user_data.get('orders'):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    orders_text = "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
    for order_id in user_data['orders']:
        order = db['orders'].get(str(order_id))
        if order and order['status'] == 'paid':
            orders_text += (
                f"üÜî <b>#{order_id}</b>\n"
                f"‚ñ´Ô∏è –£—Å–ª—É–≥–∞: {order['service']}\n"
                f"‚ñ´Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {order['platform']}\n"
                f"‚ñ´Ô∏è –ö–∞–Ω–∞–ª: {order['channel']}\n"
                f"‚ñ´Ô∏è –î–∞—Ç–∞: {order['date']} {order['time']}\n"
                f"‚ñ´Ô∏è –°—É–º–º–∞: {order['amount']} —Ä—É–±\n"
                f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            )
    
    await message.answer(orders_text, parse_mode="HTML")

@dp.message(F.text == "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def cmd_deposit(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º 100 —Ä—É–±):",
        reply_markup=get_back_kb()
    )
    await state.set_state(PaymentStates.choosing_amount)

@dp.message(PaymentStates.choosing_amount, F.text.regexp(r'^\d+$'))
async def process_deposit_amount(message: types.Message, state: FSMContext):
    amount = int(message.text)
    if amount < 100:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100 —Ä—É–±. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:")
        return
    
    await state.update_data(amount=amount)
    
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å CryptoBot"))
    kb.add(KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π"))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer(
        f"–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} —Ä—É–±\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(PaymentStates.confirmation)

@dp.message(PaymentStates.confirmation, F.text == "üí∞ –û–ø–ª–∞—Ç–∏—Ç—å CryptoBot")
async def deposit_with_cryptobot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    rub_amount = Decimal(str(data['amount']))
    usdt_amount = await convert_rub_to_usdt(rub_amount)
    user_id = message.from_user.id
    
    if usdt_amount < Decimal('1.00'):
        await message.answer(
            f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 1 USDT (~{USDT_RATE} —Ä—É–±)\n"
            f"–í–∞—à–∞ —Å—É–º–º–∞: {usdt_amount} USDT",
            reply_markup=get_back_kb()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
    temp_deposits[user_id] = {
        'rub_amount': rub_amount,
        'usdt_amount': usdt_amount,
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN,
        "Content-Type": "application/json"
    }
    payload = {
        "asset": "USDT",
        "amount": str(usdt_amount),
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {rub_amount} —Ä—É–±",
        "payload": f"deposit_{user_id}",
        "allow_anonymous": False
    }
    
    try:
        response = requests.post(f"{CRYPTO_BOT_API_URL}/createInvoice", headers=headers, json=payload)
        response.raise_for_status()
        invoice = response.json()['result']
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", url=invoice['pay_url'])],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_deposit_{invoice['invoice_id']}")]
        ])
        
        await message.answer(
            f"üíé <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            f"‚ñ´Ô∏è –°—É–º–º–∞: <b>{rub_amount} —Ä—É–±</b>\n"
            f"‚ñ´Ô∏è –í USDT: <b>{usdt_amount}</b>\n"
            f"‚ñ´Ô∏è –ö—É—Ä—Å: 1 USDT = {USDT_RATE} —Ä—É–±\n\n"
            "‚è≥ –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω <b>15 –º–∏–Ω—É—Ç</b>",
            reply_markup=kb,
            parse_mode="HTML"
        )
        
        asyncio.create_task(check_deposit_payment(invoice['invoice_id'], user_id, rub_amount, usdt_amount))
        
    except Exception as e:
        logger.error(f"CryptoBot deposit error: {e}")
        await message.answer(
            "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_kb()
        )

async def check_deposit_payment(invoice_id, user_id, rub_amount, usdt_amount):
    headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
    
    for _ in range(30):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
        await asyncio.sleep(30)
        try:
            response = requests.get(f"{CRYPTO_BOT_API_URL}/getInvoices?invoice_ids={invoice_id}", headers=headers)
            response.raise_for_status()
            invoice = response.json()['result']['items'][0]
            
            if invoice['status'] == 'paid' and user_id in temp_deposits:
                db = load_db()
                user_id_str = str(user_id)
                
                # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
                current_balance = Decimal(db['users'].get(user_id_str, {}).get('balance', '0'))
                db['users'].setdefault(user_id_str, {
                    'balance': 0,
                    'orders': [],
                    'username': (await bot.get_chat(user_id)).username
                })
                
                db['users'][user_id_str]['balance'] = str(current_balance + rub_amount)
                save_db(db)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                del temp_deposits[user_id]
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.send_message(
                    user_id,
                    f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                    f"‚ñ´Ô∏è –°—É–º–º–∞: {rub_amount} —Ä—É–±\n"
                    f"‚ñ´Ô∏è –í USDT: {usdt_amount}\n"
                    f"‚ñ´Ô∏è –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {current_balance + rub_amount} —Ä—É–±",
                    reply_markup=get_main_kb(user_id),
                    parse_mode="HTML"
                )
                return
                
        except Exception as e:
            logger.error(f"Deposit check error: {e}")
    
    # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞
    if user_id in temp_deposits:
        await bot.send_message(
            user_id,
            "‚åõ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ. –ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=get_main_kb(user_id)
        )
        del temp_deposits[user_id]

@dp.callback_query(F.data.startswith("check_deposit_"))
async def check_deposit_handler(callback: types.CallbackQuery):
    invoice_id = callback.data.split("_")[2]
    headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
    
    try:
        response = requests.get(f"{CRYPTO_BOT_API_URL}/getInvoices?invoice_ids={invoice_id}", headers=headers)
        response.raise_for_status()
        invoice = response.json()['result']['items'][0]
        
        if invoice['status'] == 'paid':
            await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–∞!", show_alert=True)
        else:
            await callback.answer("‚ÑπÔ∏è –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Deposit check error: {e}")
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_support(message: types.Message):
    support_text = f"""
üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º:
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: {SUPPORT_USERNAME}
‚Ä¢ –ò–ª–∏ –Ω–∞ email: support@example.com

‚è≥ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 10:00-20:00 (–ú–°–ö)
    """
    await message.answer(support_text, parse_mode="HTML", reply_markup=get_back_kb())

# =============================================
# –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ (–ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
# =============================================

@dp.message(F.text == "üëë –ê–¥–º–∏–Ω")
async def cmd_admin(message: types.Message):
    db = load_db()
    user_id = message.from_user.id
    
    if user_id not in db['admins']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"))
    kb.add(KeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"))
    kb.add(KeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"))
    kb.add(KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"))
    kb.add(KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"))
    kb.add(KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    kb.add(KeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    kb.adjust(2)
    
    await message.answer(
        "üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.as_markup(resize_keyboard=True),
        parse_mode="HTML"
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
async def show_bot_stats(message: types.Message):
    db = load_db()
    
    stats = {
        "users": len(db['users']),
        "orders": len(db['orders']),
        "paid_orders": sum(1 for o in db['orders'].values() if o['status'] == 'paid'),
        "revenue": sum(float(o['amount']) for o in db['orders'].values() if o['status'] == 'paid'),
        "admins": len(db['admins'])
    }
    
    text = (
        "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['users']}</b>\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{stats['orders']}</b>\n"
        f"üí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: <b>{stats['paid_orders']}</b>\n"
        f"üíµ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{stats['revenue']:.2f} —Ä—É–±</b>\n"
        f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: <b>{stats['admins']}</b>\n\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await message.answer(text, parse_mode="HTML")

@dp.message(F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
async def manage_orders(message: types.Message, state: FSMContext):
    db = load_db()
    
    if not db['orders']:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤
    last_orders = sorted(
        [(k, v) for k, v in db['orders'].items()],
        key=lambda x: x[1]['created_at'],
        reverse=True
    )[:10]
    
    kb = InlineKeyboardBuilder()
    for order_id, order in last_orders:
        status_icon = "‚úÖ" if order['status'] == 'paid' else "üîÑ"
        kb.add(InlineKeyboardButton(
            text=f"{status_icon} #{order_id} - {order['service']}",
            callback_data=f"admin_order_{order_id}"
        ))
    kb.adjust(1)
    
    await message.answer(
        "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.managing_orders)

@dp.callback_query(F.data.startswith("admin_order_"), AdminStates.managing_orders)
async def process_order_management(callback: types.CallbackQuery):
    order_id = callback.data.split("_")[2]
    db = load_db()
    order = db['orders'].get(order_id)
    
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    user = db['users'].get(str(order['user_id']), {})
    status_icons = {
        'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω',
        'completed': 'üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω',
        'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω',
        'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç'
    }
    
    text = (
        f"üì¶ <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.get('username', 'N/A')} (ID: {order['user_id']})\n"
        f"üõí –£—Å–ª—É–≥–∞: {order['service']}\n"
        f"üñ• –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {order['platform']}\n"
        f"üì∫ –ö–∞–Ω–∞–ª: {order['channel']}\n"
        f"üìÖ –î–∞—Ç–∞: {order['date']} –≤ {order['time']}\n"
        f"üí∞ –°—É–º–º–∞: {order['amount']} —Ä—É–±\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {status_icons.get(order['status'], order['status'])}\n"
        f"üïí –°–æ–∑–¥–∞–Ω: {order['created_at']}"
    )
    
    kb = InlineKeyboardBuilder()
    
    if order['status'] == 'paid':
        kb.add(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{order_id}"))
        kb.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}"))
    elif order['status'] == 'completed':
        kb.add(InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"return_{order_id}"))
    
    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_orders"))
    kb.adjust(2)
    
    await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data.startswith(("complete_", "reject_", "return_")))
async def change_order_status(callback: types.CallbackQuery):
    action, order_id = callback.data.split("_")
    db = load_db()
    order = db['orders'].get(order_id)
    
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    status_map = {
        "complete": "completed",
        "reject": "rejected",
        "return": "paid"
    }
    
    new_status = status_map[action]
    order['status'] = new_status
    order['processed_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_db(db)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    status_messages = {
        "completed": f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!",
        "rejected": f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        "paid": f"üîÑ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Ä–∞–±–æ—Ç—É."
    }
    
    try:
        await bot.send_message(order['user_id'], status_messages[new_status])
    except:
        pass
    
    await callback.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}")
    await manage_orders(callback.message, callback.message.from_user.id)

@dp.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
async def show_admins(message: types.Message):
    db = load_db()
    
    if not db['admins']:
        await message.answer("‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    text = "üëë <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
    for admin_id in db['admins']:
        try:
            user = await bot.get_chat(admin_id)
            text += f"‚Ä¢ @{user.username} (ID: {admin_id})\n"
        except:
            text += f"‚Ä¢ ID: {admin_id} (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)\n"
    
    await message.answer(text, parse_mode="HTML")

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def add_admin_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
        reply_markup=get_back_kb()
    )
    await state.set_state(AdminStates.adding_admin)

@dp.message(AdminStates.adding_admin, F.text.regexp(r'^\d+$'))
async def add_admin_process(message: types.Message, state: FSMContext):
    db = load_db()
    new_admin_id = int(message.text)
    
    if new_admin_id in db['admins']:
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return
    
    db['admins'].append(new_admin_id)
    save_db(db)
    
    try:
        user = await bot.get_chat(new_admin_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} (ID: {new_admin_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
    except:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
    
    await state.clear()
    await cmd_admin(message)

@dp.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def remove_admin_start(message: types.Message, state: FSMContext):
    db = load_db()
    
    if len(db['admins']) <= 1:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    kb = ReplyKeyboardBuilder()
    for admin_id in db['admins']:
        if admin_id != message.from_user.id:  # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
            kb.add(KeyboardButton(text=str(admin_id)))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(AdminStates.removing_admin)

@dp.message(AdminStates.removing_admin, F.text.regexp(r'^\d+$'))
async def remove_admin_process(message: types.Message, state: FSMContext):
    db = load_db()
    admin_id = int(message.text)
    
    if admin_id not in db['admins']:
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return
    
    if admin_id == message.from_user.id:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è")
        return
    
    db['admins'].remove(admin_id)
    save_db(db)
    
    try:
        user = await bot.get_chat(admin_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} (ID: {admin_id}) —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    except:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    
    await state.clear()
    await cmd_admin(message)

@dp.message(F.text == "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def change_balance_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>123456789 500</code> –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ <code>123456789 -300</code> –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è):",
        reply_markup=get_back_kb(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.changing_balance)

@dp.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_kb(message.from_user.id))
    
@dp.message(AdminStates.changing_balance, F.text.regexp(r'^\d+\s+-?\d+$'))
async def change_balance_process(message: types.Message, state: FSMContext):
    user_id, amount = message.text.split()
    user_id = int(user_id)
    amount = int(amount)
    
    db = load_db()
    user_id_str = str(user_id)
    
    if user_id_str not in db['users']:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    current_balance = int(db['users'][user_id_str]['balance'])
    new_balance = current_balance + amount
    
    if new_balance < 0:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
        return
    
    db['users'][user_id_str]['balance'] = new_balance
    save_db(db)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            f"‚ÑπÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {'+' if amount >= 0 else ''}{amount} —Ä—É–±\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±"
        )
    except:
        pass
    
    await message.answer(
        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω\n"
        f"–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: {current_balance} —Ä—É–±\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {'+' if amount >= 0 else ''}{amount} —Ä—É–±\n"
        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±"
    )
    
    await state.clear()
    await cmd_admin(message)

import asyncio
import sys
import logging
import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

logging.basicConfig(level=logging.INFO)

# –§–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –Ω–µ —É–±–∏–≤–∞–ª –ø—Ä–æ—Ü–µ—Å—Å
def run_fake_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"OK")

    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), Handler)
    threading.Thread(target=server.serve_forever, daemon=True).start()

async def main():
    try:
        run_fake_server()  # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –≤ main, –±–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        sys.exit(1)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
